{"name":"Permissionsdispatcher","tagline":"Provides simple annotation-based API to handle runtime permissions in   Android M.","body":"# PermissionsDispatcher\r\n\r\n[![Build Status](https://travis-ci.org/hotchemi/PermissionsDispatcher.svg)](https://travis-ci.org/hotchemi/PermissionsDispatcher)\r\n[ ![Download](https://api.bintray.com/packages/hotchemi/maven/permissionsdispatcher/images/download.svg) ](https://bintray.com/hotchemi/maven/permissionsdispatcher/_latestVersion)\r\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-PermissionsDispatcher-green.svg?style=flat)](https://android-arsenal.com/details/1/2316)\r\n\r\nPermissionsDispatcher provides simple annotation-based API to handle runtime permissions in Android M.\r\n\r\n[Runtime permissions](https://developer.android.com/preview/features/runtime-permissions.html) is so great for users but also the hell for developers. Actually I don't want to write such a complicated [code](https://github.com/googlesamples/android-RuntimePermissions/blob/master/Application/src/main/java/com/example/android/system/runtimepermissions/MainActivity.java) anymore.\r\n\r\nYou can be released from the burden that writing a bunch of check statements whether a permission have been granted or not. \r\n\r\n## Usage\r\n\r\nHere's a minimum example that you register `MainActivity` which requires `Manifest.permission.CAMERA`.\r\n\r\n### 1. Attach annotations\r\n\r\nThere are only 3 annotations.\r\n\r\n- `@RuntimePermissions`: [Must] Register an Activity or Fragment to handle permissions.\r\n- `@NeedsPermission`: [Must] Register a method which the permission is needed.\r\n- `@ShowsRationale`: [Option] Register a method which explains why the permission is needed. Actually an annotated method is called when `shouldShowRequestPermissionRationale` returns true or when uer deny a permission.\r\n\r\n> NOTE: Annotated methods must be package private or above.\r\n\r\n```java\r\n@RuntimePermissions\r\npublic class MainActivity extends Activity {\r\n\r\n    @NeedsPermission(Manifest.permission.CAMERA)\r\n    void showCamera() {\r\n        getSupportFragmentManager().beginTransaction()\r\n                .replace(R.id.sample_content_fragment, CameraPreviewFragment.newInstance())\r\n                .addToBackStack(\"camera\")\r\n                .commitAllowingStateLoss();\r\n    }\r\n\r\n    // this is option\r\n    @ShowsRationale(Manifest.permission.CAMERA)\r\n    void showRationaleForCamera() {\r\n        Toast.makeText(this, R.string.permission_camera_rationale, Toast.LENGTH_SHORT).show();\r\n    }\r\n}\r\n```\r\n\r\n### 2. Delegate to generated class\r\n\r\nNow you can use the class that generated by annotation processor.\r\n\r\nIn this case the name is `MainActivityPermissionsDispatcher`.\r\n\r\nIt has methods ends with `WithCheck` and `onRequestPermissionsResult`.\r\n\r\nOnly you have to do is delegating the work to them.\r\n\r\n```java\r\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_main);\r\n    Button cameraButton = (Button) findViewById(R.id.button_camera);\r\n    cameraButton.setOnClickListener(this);\r\n    Button contactsButton = (Button) findViewById(R.id.button_contacts);\r\n    contactsButton.setOnClickListener(this);\r\n}\r\n\r\n@Override\r\npublic void onClick(View v) {\r\n    switch (v.getId()) {\r\n        case R.id.button_camera:\r\n            // NOTE: delegate the permission handling to generated method\r\n            MainActivityPermissionsDispatcher.showCameraWithCheck(this);\r\n            break;\r\n        case R.id.button_contacts:\r\n            // NOTE: delegate the permission handling to generated method\r\n            MainActivityPermissionsDispatcher.showContactsWithCheck(this);\r\n            break;\r\n    }\r\n}\r\n\r\n@Override\r\npublic void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\r\n    // NOTE: delegate the permission handling to generated method\r\n    MainActivityPermissionsDispatcher.\r\n            onRequestPermissionsResult(this, requestCode, permissions, grantResults);\r\n}\r\n```\r\n\r\nIf you want to know more detail, please check the [sample](https://github.com/hotchemi/PermissionsDispatcher/tree/master/permissionsdispatcher-sample) and [generated class](https://gist.github.com/hotchemi/5dc89c02399c2419fab7).\r\n\r\n## Download\r\n\r\nAdd to your project `build.gradle` file:\r\n\r\n```groovy\r\nbuildscript {\r\n  dependencies {\r\n    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'\r\n  }\r\n}\r\n\r\napply plugin: 'android-apt'\r\n\r\ndependencies {\r\n  compile 'com.github.hotchemi:permissionsdispatcher:1.0.1'\r\n  apt 'com.github.hotchemi:permissionsdispatcher-processor:1.0.1'\r\n}\r\n```\r\n\r\n## Support\r\n\r\nPermissionsDispatcher supports API level over 4, using support v4 rev.23.\r\n\r\n## ProGuard\r\n\r\n```\r\n-dontwarn permissions.dispatcher.processor.**\r\n-keep class permissions.dispatcher.** { *; }\r\n-keep class **PermissionsDispatcher { *; }\r\n-keepclasseswithmembernames class * {\r\n    @permissions.dispatcher.* <methods>;\r\n}\r\n```\r\n\r\n## License\r\n\r\n```\r\nCopyright 2015 Shintaro Katafuchi\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}