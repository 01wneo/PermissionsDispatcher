{"name":"Permissionsdispatcher","tagline":"Provides simple annotation-based API to handle runtime permissions in   Android M.","body":"# PermissionsDispatcher\r\n\r\n[![Build Status](https://travis-ci.org/hotchemi/PermissionsDispatcher.svg)](https://travis-ci.org/hotchemi/PermissionsDispatcher)\r\n[![Download](https://api.bintray.com/packages/hotchemi/maven/permissionsdispatcher/images/download.svg)](https://bintray.com/hotchemi/maven/permissionsdispatcher/_latestVersion)\r\n\r\nPermissionsDispatcher provides a simple annotation-based API to handle runtime permissions in Android Marshmallow.\r\n[Runtime permissions](https://developer.android.com/preview/features/runtime-permissions.html) are great for users, but can be tedious to implement correctly for developers, requiring a lot of boilerplate code. This library lifts the burden that comes with writing a bunch of check statements whether a permission has been granted or not from you, in order to keep your code clean and safe. The library is 100% reflection-free.\r\n\r\n## Download\r\n\r\nThis library is only compatible with Gradle-based builds.\r\n\r\nTo add it to your project, include the following in your **project** `build.gradle` file:\r\n\r\n```groovy\r\nbuildscript {\r\n  dependencies {\r\n    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'\r\n  }\r\n}\r\n```\r\n\r\nAnd on your **app module** `build.gradle`:\r\n\r\n```groovy\r\napply plugin: 'android-apt'\r\n\r\ndependencies {\r\n  compile 'com.github.hotchemi:permissionsdispatcher:2.0.4'\r\n  apt 'com.github.hotchemi:permissionsdispatcher-processor:2.0.4`\r\n}\r\n```\r\n\r\n### Note\r\n\r\nPermissionsDispatcher depends on the `support-v4` library by default, in order to be able to use some permission compat classes.\r\n\r\n## Usage\r\n\r\nHere's a minimum example, in which we register a `MainActivity` which requires `Manifest.permission.CAMERA`.\r\n\r\n### 1. Attach annotations\r\n\r\nPermissionsDispatcher introduces only a few annotations, keeping its general API concise:\r\n\r\n|Annotation|Required|Description|\r\n|---|---|---|\r\n|`@RuntimePermissions`|**✓**|Register an `Activity` or `Fragment` to handle permissions|\r\n|`@NeedsPermission`|**✓**|Annotate a method which performs the action that requires one or more permissions|\r\n|`@OnShowRationale`||Annotate a method which explains why the permission/s is/are needed. It passes in a `PermissionRequest` object which can be used to continue or abort the current permission request upon user input|\r\n|`@OnPermissionDenied`||Annotate a method which is invoked if the user doesn't grant the permissions|\r\n|`@OnNeverAskAgain`||Annotate a method which is invoked if the user chose to have the device \"never ask again\" about a permission|\r\n\r\n> NOTE: Annotated methods must not be `private`.\r\n\r\n```java\r\n@RuntimePermissions\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    @NeedsPermission(Manifest.permission.CAMERA)\r\n    void showCamera() {\r\n        getSupportFragmentManager().beginTransaction()\r\n                .replace(R.id.sample_content_fragment, CameraPreviewFragment.newInstance())\r\n                .addToBackStack(\"camera\")\r\n                .commitAllowingStateLoss();\r\n    }\r\n\r\n    @OnShowRationale(Manifest.permission.CAMERA)\r\n    void showRationaleForCamera(PermissionRequest request) {\r\n\t\tnew AlertDialog.Builder(this)\r\n\t\t\t.setMessage(R.string.permission_camera_rationale)\r\n\t\t\t.setPositiveButton(R.string.button_allow, (dialog, button) -> request.proceed())\r\n\t\t\t.setNegativeButton(R.string.button_deny, (dialog, button) -> request.cancel())\r\n\t\t\t.show();\r\n    }\r\n\r\n    @OnPermissionDenied(Manifest.permission.CAMERA)\r\n    void showDeniedForCamera() {\r\n        Toast.makeText(this, R.string.permission_camera_denied, Toast.LENGTH_SHORT).show();\r\n\t}\r\n\t\t\r\n\t@OnNeverAskAgain(Manifest.permission.CAMERA)\r\n\tvoid showNeverAskForCamera() {\r\n\t\tToast.makeText(this, R.string.permission_camera_neverask, Toast.LENGTH_SHORT).show();\r\n\t}\r\n}\r\n```\r\n\r\n### 2. Delegate to generated class\r\n\r\nUpon compilation, PermissionsDispatcher generates a class for `MainActivity` (suffixed with `PermissionsDispatcher`), which you can use to safely access these permission-protected methods. The only step you have to do is delegating the work to this helper class:\r\n\r\n```java\r\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_main);\r\n    findViewById(R.id.button_camera).setOnClickListener(this);\r\n    findViewById(R.id.button_contacts).setOnClickListener(this);\r\n}\r\n\r\n@Override\r\npublic void onClick(View v) {\r\n    switch (v.getId()) {\r\n        case R.id.button_camera:\r\n            // NOTE: delegate the permission handling to generated method\r\n            MainActivityPermissionsDispatcher.showCameraWithCheck(this);\r\n            break;\r\n        case R.id.button_contacts:\r\n            // NOTE: delegate the permission handling to generated method\r\n            MainActivityPermissionsDispatcher.showContactsWithCheck(this);\r\n            break;\r\n    }\r\n}\r\n\r\n@Override\r\npublic void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\r\n    super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n    // NOTE: delegate the permission handling to generated method\r\n    MainActivityPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults);\r\n}\r\n```\r\n\r\nCheck out the [sample](https://github.com/hotchemi/PermissionsDispatcher/tree/master/sample) and [generated class](https://gist.github.com/aurae/7821f3a2da098b949f7b) for more details.\r\n\r\n## Support\r\n\r\nPermissionsDispatcher is supported on **API levels 4 and up**, with which you get support for annotating `android.app.Activity` and `android.support.v4.app.Fragment` sub-classes out of the box.\r\n\r\nIn case you rely on `android.app.Fragment` in your app, you can use these with PermissionsDispatcher as well! Simply add a dependency on the `support-v13` library alongside PermissionsDispatcher in your project, and it will enable support for native fragments.\r\n\r\n### For 1.x user\r\n\r\n- [Migrating to 2.x](https://github.com/hotchemi/PermissionsDispatcher/wiki/Migrating-to-2.x)\r\n\r\n### For Japanese\r\n\r\n- [Android - 5分で対応するMパーミッション - Qiita](http://qiita.com/kazy/items/0ded30d80cef9df54c98)\r\n\r\n## Licence\r\n\r\n```\r\nCopyright 2016 Shintaro Katafuchi, Marcel Schnelle\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}